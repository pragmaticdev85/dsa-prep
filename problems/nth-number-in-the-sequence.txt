Question 3

There is a (increasingly) sorted array formed by multiplying any two or more consecutive natural numbers.
2, 6, 12, 20, 24, 30, 42, 56, 60, 72 ...

Ex. 2 is formed by two consecutive natural numbers 1 and 2
2 = 1×2, 6 = 2×3 OR 1×2×3,  12 = 3x4,  20 = 4×5, 24 = 2x3x4, 30 = 5x6 

If n is given as a parameter, find the nth number from the above array and return.

Limitation
1 ≤ n ≤ 1000000
n is given only when the answer is smaller than 1012

[
2 x 1
3 x 2
4 x 3
4 x 3 x 2
5 x 4
5 x 4 x 3 
5 x 4 x 3 x 2
6 x 5
6 x 5 x 4
6 x 5 x 4 x 3 
6 x 5 x 4 x 3 x 2
]
[2, 6, 12, 20, 60, 120, 30, ]*/

import java.util.LinkedHashSet;
import java.util.Set;

public class NthElementDemo {
    public static void main(String[] args){
        Set<Integer> list = new LinkedHashSet<>();

        int n = 4;
        for (int ix = 2; ix < 2 * (n + 1); ix++) {
            int jx = ix;
            int partialResult = ix;
            while (jx >= 2) {
                partialResult *= --jx;
                list.add(partialResult);
            }
        }
        System.out.println(list.stream().sorted((o1, o2) -> o1 - o2).toList());
    }
}
